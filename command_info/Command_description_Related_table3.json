[
    {
        "Command_Name": "abstract",
        "Description": "Produces a summary of each search result.",
        "Parameters": {
            "Optional": {
                "maxlines": "maxlines=<int>",
                "maxterms": "maxterms=<int>"
            },
            "Required": {}
        },
        "Related commands": "highlight",
        "Supported functions and syntax": "abstract [maxterms=<int>] [maxlines=<int>]"
    },
    {
        "Command_Name": "accum",
        "Description": "Keeps a running total of the specified numeric field.",
        "Parameters": {
            "Optional": {
                "newfield": "<string>"
            },
            "Required": {
                "field": "<string>"
            }
        },
        "Related commands": "autoregress, delta, trendline, streamstats",
        "Supported functions and syntax": "accum <field> [AS <newfield>]"
    },
    {
        "Command_Name": "addcoltotals",
        "Description": "Computes an event that contains sum of all numeric fields for previous events.",
        "Parameters": {
            "Optional": {
                "<fieldlist>": "<field> ...",
                "label": "label=<string>",
                "labelfield": "labelfield=<fieldname>"
            },
            "Required": {}
        },
        "Related commands": "addtotals, stats",
        "Supported functions and syntax": "addcoltotals [labelfield=<field>] [label=<string>] [<fieldlist>]"
    },
    {
        "Command_Name": "addinfo",
        "Description": "Add fields that contain common information about the current search.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "search",
        "Supported functions and syntax": "addinfo"
    },
    {
        "Command_Name": "addtotals",
        "Description": "Computes the sum of all numeric fields for each result.",
        "Parameters": {
            "Optional": {
                "col": "col=<bool>",
                "field-list": "<field> ...",
                "fieldname": "fieldname=<field>",
                "label": "label=<string>",
                "labelfield": "labelfield=<field>",
                "row": "row=<bool>"
            },
            "Required": {}
        },
        "Related commands": "addcoltotals, stats",
        "Supported functions and syntax": "addtotals [row=<bool>] [col=<bool>] [labelfield=<field>] [label=<string>] [fieldname=<field>] [<field-list>]"
    },
    {
        "Command_Name": "analyzefields",
        "Description": "Analyze numerical fields for their ability to predict another discrete field.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "classfield": "classfield=<field>"
            }
        },
        "Related commands": "anomalousvalue",
        "Supported functions and syntax": "analyzefields classfield=<field>"
    },
    {
        "Command_Name": "anomalies",
        "Description": "Computes an \"unexpectedness\" score for an event.",
        "Parameters": {
            "Optional": {
                "by-clause": "by <fieldlist>"
            },
            "Required": {}
        },
        "Related commands": "anomalousvalue, cluster, kmeans, outlier",
        "Supported functions and syntax": "anomalies [threshold=num] [labelonly=bool] [normalize=bool] [maxvalues=int] [field=field] [blacklist=filename] [blacklistthreshold=num] [by-clause]"
    },
    {
        "Command_Name": "anomalousvalue",
        "Description": "Finds and summarizes irregular, or uncommon, search results.",
        "Parameters": {
            "Optional": {
                "<av-options>": "minsupcount=<int> | maxanofreq=<float> | minsupfreq=<float> | minnormfreq=<float>",
                "action": "action=annotate | filter | summary",
                "annotate": "action=annotate",
                "field-list": "<field> ...",
                "filter": "action=filter",
                "maxanofreq": "maxanofreq=<float>",
                "minnormfreq": "minnormfreq=<float>",
                "minsupcount": "minsupcount=<int>",
                "minsupfreq": "minsupfreq=<float>",
                "pthresh": "pthresh=<num>",
                "summary": "action=summary"
            },
            "Required": {}
        },
        "Related commands": "analyzefields, anomalies, cluster, kmeans, outlier",
        "Supported functions and syntax": "anomalousvalue <av-options>... [action] [pthresh] [field-list]"
    },
    {
        "Command_Name": "anomalydetection",
        "Description": "Identifies anomalous events by computing a probability for each event and then detecting unusually small probabilities.",
        "Parameters": {
            "Optional": {
                "<action-option>": "action=remove | transform",
                "<cutoff-option>": "cutoff=<bool>",
                "<field-list>": "<string> <string>  ...",
                "<method-option>": "method = histogram | zscore | iqr",
                "<pthresh-option>": "pthresh=<num>"
            },
            "Required": {}
        },
        "Related commands": "analyzefields, anomalies, anomalousvalue, cluster, kmeans, outlier",
        "Supported functions and syntax": "anomalydetection [<method-option>] [<action-option>] [<pthresh-option>] [<cutoff-option>] [<field-list>]"
    },
    {
        "Command_Name": "append",
        "Description": "Appends subsearch results to current results.",
        "Parameters": {
            "Optional": {
                "extendtimerange": "extendtimerange=<boolean>",
                "maxout": "maxout=<int>",
                "maxtime": "maxtime=<int>",
                "subsearch-options": "extendtimerange=<boolean> | maxtime=<int> | maxout=<int> | timeout=<int>",
                "timeout": "timeout=<int>"
            },
            "Required": {
                "subsearch": "[subsearch]"
            }
        },
        "Related commands": "appendcols, appendcsv, appendlookup, join, set",
        "Supported functions and syntax": "append [<subsearch-options>...] <subsearch>"
    },
    {
        "Command_Name": "appendcols",
        "Description": "Appends the fields of the subsearch results to current results, first results to first result, second to second, etc.",
        "Parameters": {
            "Optional": {
                "maxout": "maxout=<int>",
                "maxtime": "maxtime=<int>",
                "override": "override=<bool>",
                "subsearch-options": "maxtime=<int> | maxout=<int> | timeout=<int>",
                "timeout": "timeout=<int>"
            },
            "Required": {}
        },
        "Related commands": "append, appendcsv, join, set",
        "Supported functions and syntax": "appendcols [override= <bool> | <subsearch-options>...] <subsearch>"
    },
    {
        "Command_Name": "appendpipe",
        "Description": "Appends the result of the subpipeline applied to the current result set to results.",
        "Parameters": {
            "Optional": {
                "run_in_preview": "run_in_preview=<bool>",
                "subpipeline": "<subpipeline>"
            },
            "Required": {}
        },
        "Related commands": "append, appendcols, join, set",
        "Supported functions and syntax": "appendpipe [run_in_preview=<bool>] [<subpipeline>]"
    },
    {
        "Command_Name": "arules",
        "Description": "Finds association rules between field values.",
        "Parameters": {
            "Optional": {
                "<arules-option>": "<support> | <confidence>",
                "confidence": "conf=<float>",
                "support": "sup=<int>"
            },
            "Required": {
                "field-list": "<field> <field> ..."
            }
        },
        "Related commands": "associate, correlate",
        "Supported functions and syntax": "arules [<arules-option>... ] <field-list>..."
    },
    {
        "Command_Name": "associate",
        "Description": "Identifies correlations between fields.",
        "Parameters": {
            "Optional": {
                "associate-option": "supcnt | supfreq | improv",
                "field-list": "<field> ...",
                "improv": "improv=<num>",
                "supcnt": "supcnt=<num>",
                "supfreq": "supfreq=<num>"
            },
            "Required": {}
        },
        "Related commands": "correlate, contingency",
        "Supported functions and syntax": "associate [<associate-options>...] [field-list]"
    },
    {
        "Command_Name": "audit",
        "Description": "Returns audit trail information that is stored in the local audit index.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "audit"
    },
    {
        "Command_Name": "autoregress",
        "Description": "Sets up data for calculating the moving average.",
        "Parameters": {
            "Optional": {
                "newfield": "<field>",
                "p": "p=<int> | p=<int>-<int>"
            },
            "Required": {
                "field": "<string>"
            }
        },
        "Related commands": "accum, autoregress, delta, trendline, streamstats",
        "Supported functions and syntax": "autoregress <field> [AS <newfield>] [ p=<int> | p=<int>-<int> ]"
    },
    {
        "Command_Name": "bin",
        "Description": "Puts continuous numerical values into discrete sets.",
        "Parameters": {
            "Optional": {
                "<start-end>": "start=<num> | end=<num>",
                "<timescale>": "<sec> | <min> | <hr> | <day> | <month> | <subseconds>",
                "aligntime": "aligntime=(earliest | latest | <time-specifier>)",
                "bin-options": "bins | minspan | span | <start-end> | aligntime",
                "bins": "bins=<int>",
                "log-span": "[<num>]log[<num>]",
                "minspan": "minspan=<span-length>",
                "newfield": "<string>",
                "span": "span = <log-span> | <span-length>",
                "span-length": "<int>[<timescale>]"
            },
            "Required": {
                "field": "<field>"
            }
        },
        "Related commands": "chart, timechart",
        "Supported functions and syntax": "bin [<bin-options>...] <field> [AS <newfield>]"
    },
    {
        "Command_Name": "bucketdir",
        "Description": "Replaces a field value with higher-level grouping, such as replacing filenames with directories.",
        "Parameters": {
            "Optional": {
                "countfield": "countfield=<field>",
                "maxcount": "maxcount=<int>",
                "sep": "<char>"
            },
            "Required": {
                "pathfield": "pathfield=<field>",
                "sizefield": "sizefield=<field>"
            }
        },
        "Related commands": "cluster, dedup",
        "Supported functions and syntax": "bucketdir pathfield=<field> sizefield=<field> [maxcount=<int>] [countfield=<field>] [sep=<char>]"
    },
    {
        "Command_Name": "chart",
        "Description": "Returns results in a tabular output for charting. See also, Statistical and charting functions.",
        "Parameters": {
            "Optional": {
                "<log-span>": "[<num>]log[<num>]",
                "<span>": "<int>",
                "<start-end>": "end=<num> | start=<num>",
                "<timescale>": "<sec> | <min> | <hr> | <day> | <month> | <subseconds>",
                "<where-comp>": "<wherein-comp> | <wherethresh-comp>",
                "<wherein-comp>": "(in | notin) (top | bottom)<int>",
                "<wherethresh-comp>": "( < | > ) <num>",
                "agg": "agg=<stats-agg-term>",
                "aligntime": "aligntime=(earliest | latest | <time-specifier>)",
                "bins": "bins=<int>",
                "chart-options": "cont | format | limit | sep",
                "column-split": "<field> [<tc-options>]... [<where-clause>]",
                "cont": "cont=<bool>",
                "dedup_splitvals": "dedup_splitvals=<boolean>",
                "format": "format=<string>",
                "limit": "limit=<int>",
                "nullstr": "nullstr=<string>",
                "row-split": "<field> [<bin-options>]...",
                "sep": "sep=<string>",
                "single-agg": "count | <stats-func>(<field>)",
                "span": "span=<log-span> | span=<span-length>",
                "span-length": "<span>[<timescale>]",
                "sparkline-agg": "sparkline (count(<wc-field>), <span-length>) | sparkline (<sparkline-func>(<wc-field>), <span-length>)",
                "sparkline-func": "c() | count() | dc() | mean() | avg() | stdev() | stdevp() | var() | varp() | sum() | sumsq() | min() | max() | range()",
                "stats-func": "The syntax depends on the function you use. Refer to the table below.",
                "tc-options": "<bin-options> | usenull=<bool> | useother=<bool> | nullstr=<string> | otherstr=<string>",
                "usenull": "usenull=<bool>",
                "where clause": "<single-agg> <where-comp>"
            },
            "Required": {
                "eval-expression": "<eval-math-exp> | <eval-concat-exp> | <eval-compare-exp> | <eval-bool-exp> | <eval-function-call>",
                "sparkline-agg-term": "<sparkline-agg> [AS <wc-field>]",
                "stats-agg-term": "<stats-func> ( <evaled-field> | <wc-field>  ) [AS <wc-field>]"
            }
        },
        "Related commands": "bin,sichart, timechart",
        "Supported functions and syntax": "chart [<chart-options>] [agg=<stats-agg-term>]\n( <stats-agg-term> | <sparkline-agg-term> | \"(\"<eval-expression>\")\"  )...\n[ BY <row-split> <column-split> ] | [ OVER <row-split> ] [BY <column-split>] ]\n[<dedup_splitvals>]"
    },
    {
        "Command_Name": "cluster",
        "Description": "Clusters similar events together.",
        "Parameters": {
            "Optional": {
                "countfield": "countfield=<field>",
                "delims": "delims=<string>",
                "field": "field=<field>",
                "labelfield": "labelfield=<field>",
                "match": "match=(termlist | termset | ngramset)",
                "showcount": "showcount=<bool>",
                "slc-options": "t=<num> | delims=<string> | showcount=<bool> | countfield=<field> | labelfield=<field> | field=<field> | labelonly=<bool> | match=(termlist | termset | ngramset)",
                "t": "t=<num>"
            },
            "Required": {}
        },
        "Related commands": "anomalies, anomalousvalue, cluster, kmeans, outlier",
        "Supported functions and syntax": "cluster [slc-options]..."
    },
    {
        "Command_Name": "cofilter",
        "Description": "Finds how many times field1 and field2 values occurred together.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "field1": "<field>",
                "field2": "<field>"
            }
        },
        "Related commands": "associate, correlate",
        "Supported functions and syntax": "cofilter <field1> <field2>"
    },
    {
        "Command_Name": "collect",
        "Description": "Puts search results into a summary index.",
        "Parameters": {
            "Optional": {
                "addtime": "addtime=<bool>",
                "arg-options": "addtime=<bool> | file=<string> | spool=<bool> | marker=<string> | testmode=<bool> | run_in_preview=<bool> | host=<string> | source=<string> | sourcetype=<string>",
                "file": "file=<string>",
                "host": "host=<string>",
                "marker": "marker=<string>",
                "run_in_preview": "run_in_preview=<bool>",
                "source": "source=<string>",
                "sourcetype": "sourcetype=<string>",
                "spool": "spool=<bool>",
                "testmode": "testmode=<bool>"
            },
            "Required": {
                "index": "index=<string>"
            }
        },
        "Related commands": "overlap",
        "Supported functions and syntax": "collect index=<string> [<arg-options>...]"
    },
    {
        "Command_Name": "concurrency",
        "Description": "Uses a duration field to find the number of \"concurrent\" events for each event.",
        "Parameters": {
            "Optional": {
                "output": "output=<field>",
                "start": "start=<field>"
            },
            "Required": {
                "duration": "duration=<field>"
            }
        },
        "Related commands": "timechart",
        "Supported functions and syntax": "concurrency duration=<field> [start=<field>] [output=<field>]"
    },
    {
        "Command_Name": "contingency",
        "Description": "Builds a contingency table for two fields.",
        "Parameters": {
            "Optional": {
                "contingency-options": "<maxopts> | <mincover> | <usetotal> | <totalstr>",
                "maxopts": "maxrows=<int> | maxcols=<int>",
                "mincover": "mincolcover=<num> | minrowcover=<num>",
                "totalstr": "totalstr=<field>",
                "usetotal": "usetotal=<bool>"
            },
            "Required": {
                "<field1>": "<field>",
                "<field2>": "<field>"
            }
        },
        "Related commands": "associate, correlate",
        "Supported functions and syntax": "contingency [<contingency-options>...] <field1> <field2>"
    },
    {
        "Command_Name": "convert",
        "Description": "Converts field values into numerical values.",
        "Parameters": {
            "Optional": {
                "<field>": "<string>",
                "auto()": "auto(<wc-field>)",
                "ctime()": "ctime(<wc-field>)",
                "dur2sec()": "dur2sec(<wc-field>)",
                "memk()": "memk(<wc-field>)",
                "mktime()": "mktime(<wc-field>)",
                "mstime()": " mstime(<wc-field>)",
                "none()": "none(<wc-field>)",
                "num()": "num(<wc-field>)",
                "rmcomma()": "rmcomma(<wc-field>)",
                "rmunit()": "rmunit(<wc-field>)",
                "timeformat": "timeformat=<string>"
            },
            "Required": {
                "<convert-function>": "auto() | ctime() | dur2sec() | memk() | mktime() | mstime() | none() | num() | rmcomma() | rmunit()"
            }
        },
        "Related commands": "eval",
        "Supported functions and syntax": "convert [timeformat=string] (<convert-function> [AS <field>] )..."
    },
    {
        "Command_Name": "correlate",
        "Description": "Calculates the correlation between different fields.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "associate, contingency",
        "Supported functions and syntax": "correlate"
    },
    {
        "Command_Name": "datamodel",
        "Description": "Examine data model or data model dataset and search a data model dataset.",
        "Parameters": {
            "Optional": {
                "allow_old_summaries": "allow_old_summaries=<bool>",
                "data model name": "<string>",
                "data model search mode": "<data model search result mode> | <data model search string mode>",
                "data model search result mode": "search | flat | acceleration_search",
                "data model search string mode": "search_string | flat_string | acceleration_search_string",
                "dataset name": "<string>",
                "strict_fields": "strict_fields=<bool>",
                "summariesonly": "summariesonly=<bool>"
            },
            "Required": {}
        },
        "Related commands": "pivot",
        "Supported functions and syntax": "| datamodel [<data model name>] [<dataset name>] [<data model search mode>] [strict_fields=<bool>] [allow_old_summaries=<bool>] [summariesonly=<bool>] "
    },
    {
        "Command_Name": "dbinspect",
        "Description": "Returns information about the specified index.",
        "Parameters": {
            "Optional": {
                "<corruptonly>": "corruptonly=<bool>",
                "<span>": "span=<int> | span=<int><timescale>",
                "<timeformat>": "timeformat=<string>",
                "<timescale>": "<sec> | <min> | <hr> | <day> | <month> | <subseconds>",
                "index": "index=<wc-string>..."
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "| dbinspect [index=<wc-string>]... [<span> | <timeformat>] [corruptonly=<bool>]"
    },
    {
        "Command_Name": "dedup",
        "Description": "Removes subsequent results that match a specified criteria.",
        "Parameters": {
            "Optional": {
                "<N>": "<int>",
                "<field>": "<string>",
                "<sort-by-clause>": "sortby ( - | + ) <sort-field> [(- | +) <sort_field> ...]",
                "<sort-field>": "<field> |  auto(<field>) | str(<field>) | ip(<field>) | num(<field>)",
                "auto": "auto(<field>)",
                "consecutive": "consecutive=<bool>",
                "ip": "ip(<field>)",
                "keepempty": "keepempty=<bool>",
                "keepevents": "keepevents=<bool>",
                "num": "num(<field>)",
                "str": "str(<field>)"
            },
            "Required": {
                "<field-list>": "<string> <string>  ..."
            }
        },
        "Related commands": "uniq",
        "Supported functions and syntax": "dedup [<int>] <field-list> [keepevents=<bool>] [keepempty=<bool>] [consecutive=<bool>] [sortby <sort-by-clause>]"
    },
    {
        "Command_Name": "delete",
        "Description": "Delete specific events or search results.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "delete"
    },
    {
        "Command_Name": "delta",
        "Description": "Computes the difference in field value between nearby results.",
        "Parameters": {
            "Optional": {
                "newfield": "<string>",
                "p": "p=<int>"
            },
            "Required": {
                "field": "<field-name>"
            }
        },
        "Related commands": "accum, autoregress, trendline, streamstats",
        "Supported functions and syntax": "delta (<field> [AS <newfield>]) [p=int]"
    },
    {
        "Command_Name": "diff",
        "Description": "Returns the difference between two search results.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "diff [position1=int] [position2=int] [attribute=string] [diffheader=bool] [context=bool] [maxlen=int]"
    },
    {
        "Command_Name": "erex",
        "Description": "Allows you to specify example or counter example values to automatically extract fields that have similar values.",
        "Parameters": {
            "Optional": {
                "counterexamples": "counterexamples=<string>,<string>,...",
                "field": "<string>",
                "fromfield": "fromfield=<field>",
                "maxtrainers": "maxtrainers=<int>"
            },
            "Required": {
                "examples": "examples=<string>,<string>..."
            }
        },
        "Related commands": "extract, kvform, multikv, regex, rex, xmlkv",
        "Supported functions and syntax": "erex [<field>] examples=<string> [counterexamples=<string>] [fromfield=<field>] [maxtrainers=<int>]"
    },
    {
        "Command_Name": "eval",
        "Description": "Calculates an expression and puts the value into a field. See also, Evaluation functions.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "expression": "<string>",
                "field": "<string>"
            }
        },
        "Related commands": "where",
        "Supported functions and syntax": "eval <field>=<expression>[\",\"  <field>=<expression>]..."
    },
    {
        "Command_Name": "eventcount",
        "Description": "Returns the number of events in an index.",
        "Parameters": {
            "Optional": {
                "index": "index=<string>",
                "list_vix": "list_vix=<bool>",
                "report_size": "report_size=<bool>",
                "summarize": "summarize=<bool>"
            },
            "Required": {}
        },
        "Related commands": "dbinspect",
        "Supported functions and syntax": "| eventcount [index=<string>]... [summarize=<bool>] [report_size=<bool>] [list_vix=<bool>]"
    },
    {
        "Command_Name": "eventstats",
        "Description": "Adds summary statistics to all search results.",
        "Parameters": {
            "Optional": {
                "<by-clause>": "BY <field-list>",
                "allnum": "allnum=<bool>",
                "stats-func": "The syntax depends on the function that you use. Refer to the table below."
            },
            "Required": {
                "<stats-agg-term>": "<stats-func>( <evaled-field> | <wc-field>  ) [AS <wc-field>]"
            }
        },
        "Related commands": "stats",
        "Supported functions and syntax": "eventstats [allnum=<bool>] <stats-agg-term>... [<by-clause>]"
    },
    {
        "Command_Name": "extract",
        "Description": "Extracts field-value pairs from search results.",
        "Parameters": {
            "Optional": {
                "<extract-options>": "clean_keys=<bool> | kvdelim=<string> | limit=<int> | maxchars=<int> | mv_add=<bool> | pairdelim=<string> | reload=<bool> | segment=<bool>",
                "<extractor-name>": "<string>",
                "clean_keys": "clean_keys=<bool>",
                "kvdelim": "kvdelim=<string>",
                "limit": "limit=<int>",
                "maxchars": "maxchars=<int>",
                "mv_add": "mv_add=<bool>",
                "pairdelim": "pair=<string>",
                "reload": "reload=<bool>",
                "segment": "segment=<bool>"
            },
            "Required": {}
        },
        "Related commands": "kvform, multikv, xmlkv, rex",
        "Supported functions and syntax": "extract [<extract-options>... ] [<extractor-name>...]"
    },
    {
        "Command_Name": "fieldformat",
        "Description": "Expresses how to render a field at output time without changing the underlying value.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "<eval-expression>": "<string>"
            }
        },
        "Related commands": "eval, where",
        "Supported functions and syntax": "fieldformat <field>=<eval-expression>"
    },
    {
        "Command_Name": "fields",
        "Description": "Removes fields from search results.",
        "Parameters": {
            "Optional": {
                "+ | -": "+ | -"
            },
            "Required": {
                "<wc-field-list>": "<string>, <string>, ..."
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "fields [+|-] <wc-field-list>"
    },
    {
        "Command_Name": "fieldsummary",
        "Description": "Generates summary information for all or a subset of the fields.",
        "Parameters": {
            "Optional": {
                "maxvals": "maxvals=<num>"
            },
            "Required": {}
        },
        "Related commands": "analyzefields, anomalies, anomalousvalue, stats",
        "Supported functions and syntax": "fieldsummary [maxvals=<num>] [<wc-field-list>]"
    },
    {
        "Command_Name": "filldown",
        "Description": "Replaces NULL values with the last non-NULL value.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "<wc-field-list>": "<string>, <string>, ..."
            }
        },
        "Related commands": "fillnull",
        "Supported functions and syntax": "filldown <wc-field-list>"
    },
    {
        "Command_Name": "fillnull",
        "Description": "Replaces null values with a specified value.",
        "Parameters": {
            "Optional": {
                "field-list": "<field>..."
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "fillnull [value=string] [<field-list>]"
    },
    {
        "Command_Name": "findtypes",
        "Description": "Generates a list of suggested event types.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "typer",
        "Supported functions and syntax": "findtypes max=<int> [notcovered] [useraw]"
    },
    {
        "Command_Name": "folderize",
        "Description": "Creates a higher-level grouping, such as replacing filenames with directories.",
        "Parameters": {
            "Optional": {
                "attr": "attr=<string>",
                "maxfolders": "maxfolders=<int>",
                "minfolders": "minfolders=<int>",
                "sep": "sep=<string>",
                "size": "size=<string>"
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "folderize attr=<string> [sep=<string>] [size=<string>] [minfolders=<int>] [maxfolders=<int>]"
    },
    {
        "Command_Name": "foreach",
        "Description": "Run a templatized streaming subsearch for each field in a wildcarded field list.",
        "Parameters": {
            "Optional": {
                "fieldstr": "fieldstr=<string>",
                "matchseg1": "matchseg1=<string>",
                "matchseg2": "matchseg2=<string>",
                "matchseg3": "matchseg3=<string>",
                "matchstr": "matchstr=<string>"
            },
            "Required": {
                "subsearch": "[ subsearch ]",
                "wc-field": "<field> ..."
            }
        },
        "Related commands": "eval",
        "Supported functions and syntax": "foreach <wc-field>... [fieldstr=<string>] [matchstr=<string>] [matchseg1=<string>] [matchseg2=<string>] [matchseg3=<string>] <subsearch>"
    },
    {
        "Command_Name": "format",
        "Description": "Takes the results of a subsearch and formats them into a single result.",
        "Parameters": {
            "Optional": {
                "<column end>": "\"<string>\"",
                "<column prefix>": "\"<string>\"",
                "<column separator>": "\"<string>\"",
                "<row end>": "\"<string>\"",
                "<row prefix>": "\"<string>\"",
                "<row separator>": "\"<string>\"",
                "maxresults": "maxresults=<int>",
                "mvsep": "mvsep=\"<string>\""
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "format [mvsep=\"<mv separator>\"] [maxresults=<int>] [\"<row prefix>\" \"<column prefix>\" \"<column separator>\" \"<column end>\" \"<row separator>\" \"<row end>\"]"
    },
    {
        "Command_Name": "from",
        "Description": "Retrieves data from a dataset, such as a data model dataset, a CSV lookup, a KV Store lookup, a saved search, or a table dataset.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "<dataset_name>": "<dataset_name>",
                "<dataset_type>": "<dataset_type>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "| from <dataset_type>:<dataset_name>"
    },
    {
        "Command_Name": "gauge",
        "Description": "Transforms results into a format suitable for display by the Gauge chart types.",
        "Parameters": {
            "Optional": {
                "range values": "<range_val1> <range_val2> ..."
            },
            "Required": {
                "value": "field_name | <num>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "gauge <value> [<range_val1> <range_val2> ...]"
    },
    {
        "Command_Name": "gentimes",
        "Description": "Generates time-range results.",
        "Parameters": {
            "Optional": {
                "end": "end=<timestamp>",
                "increment": "increment=<int>(s | m | h | d)"
            },
            "Required": {
                "<timestamp>": "MM/DD/YYYY[:HH:MM:SS] | <int>",
                "start": "start=<timestamp>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "| gentimes start=<timestamp> [end=<timestamp>] [increment=<increment>]"
    },
    {
        "Command_Name": "geom",
        "Description": "Adds a field, named \"geom\", to each event. This field contains geographic data structures for polygon geometry in JSON and is used for the choropleth map visualization.",
        "Parameters": {
            "Optional": {
                "allFeatures": "allFeatures=<bool>",
                "featureCollection": "<geo_lookup>",
                "featureIdField": "featureIdField=<field>",
                "gen": "gen=<double>",
                "max_x": " max_x=<double>",
                "max_y": "max_y=<double>",
                "min_x": "min_x=<double>",
                "min_y": " min_y=<double>"
            },
            "Required": {}
        },
        "Related commands": "geomfilter",
        "Supported functions and syntax": "geom [<featureCollection>] [allFeatures=<boolean>] [featureIdField=<string>] [gen=<double>] [min_x=<double>] [min_y=<double>] [max_x=<double>] [max_y=<double>]"
    },
    {
        "Command_Name": "geomfilter",
        "Description": "Accepts two points that specify a bounding box for clipping a choropleth map. Points that fall outside of the bounding box are filtered out.",
        "Parameters": {
            "Optional": {
                "max_x": "max_x=<float>",
                "max_y": "max_y=<float>",
                "min_x": "min_x=<float>",
                "min_y": "min_y=<float>"
            },
            "Required": {}
        },
        "Related commands": "geom",
        "Supported functions and syntax": "geomfilter [min_x=<float>] [min_y=<float>] [max_x=<float>] [max_y=<float>]"
    },
    {
        "Command_Name": "geostats",
        "Description": "Generate statistics which are clustered into geographical bins to be rendered on a world map.",
        "Parameters": {
            "Optional": {
                "binspanlat": "binspanlat=<float>",
                "binspanlong": "binspanlong=<float>",
                "by-clause": "BY <field>",
                "globallimit": "globallimit=<int>",
                "latfield": "latfield=<field>",
                "locallimit": "locallimit=<int>",
                "longfield": "longfield=<field>",
                "maxzoomlevel": "maxzoomlevel=<int>",
                "outputlatfield": "outputlatfield=<string>",
                "outputlongfield": "outputlongfield=<string>",
                "stats-func": "The syntax depends on the function that you use. Refer to the table below.",
                "translatetoxy": "translatetoxy=<bool>"
            },
            "Required": {
                "stats-agg-term": "<stats-func> ( <evaled-field> | <wc-field>  ) [AS <wc-field>]"
            }
        },
        "Related commands": "stats, xyseries",
        "Supported functions and syntax": "The required syntax is in bold."
    },
    {
        "Command_Name": "head",
        "Description": "Returns the first number n of specified results.",
        "Parameters": {
            "Optional": {
                "<N>": "<int>",
                "eval-expression": " <eval-compare-exp> | <eval-bool-exp>",
                "keeplast": "keeplast=<bool>",
                "limit": "limit=<int>",
                "null": "null=<bool>"
            },
            "Required": {}
        },
        "Related commands": "reverse, tail",
        "Supported functions and syntax": "head [<N> | (<eval-expression>)] [limit=<int>] [null=<bool>] [keeplast=<bool>]"
    },
    {
        "Command_Name": "highlight",
        "Description": "Highlights the specified terms.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "<string>": "<string> ..."
            }
        },
        "Related commands": "iconify",
        "Supported functions and syntax": "highlight <string>..."
    },
    {
        "Command_Name": "history",
        "Description": "Returns a history of searches formatted as an events list or as a table.",
        "Parameters": {
            "Optional": {
                "events": "events=<bool>"
            },
            "Required": {}
        },
        "Related commands": "search",
        "Supported functions and syntax": "| history [events=<bool>]"
    },
    {
        "Command_Name": "iconify",
        "Description": "Displays a unique icon for each different value in the list of fields that you specify.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "field-list": "<field>..."
            }
        },
        "Related commands": "highlight",
        "Supported functions and syntax": "iconify <field-list>"
    },
    {
        "Command_Name": "input",
        "Description": "Add or disable sources.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "input (add | remove) [sourcetype=string] [index=string] [string=string]..."
    },
    {
        "Command_Name": "inputcsv",
        "Description": "Loads search results from the specified CSV file.",
        "Parameters": {
            "Optional": {
                "WHERE": "WHERE <search-query>",
                "append": "append=<bool>",
                "dispatch": "dispatch=<bool>",
                "events": "events=<bool>",
                "max": "max=<int>",
                "start": "start=<int>"
            },
            "Required": {
                "filename": "<filename>"
            }
        },
        "Related commands": "loadjob, outputcsv",
        "Supported functions and syntax": "| inputcsv [dispatch=<bool>] [append=<bool>] [start=<int>] [max=<int>] [events=<bool>] <filename> [WHERE <search-query>]"
    },
    {
        "Command_Name": "inputlookup",
        "Description": "Loads search results from a specified static lookup table.",
        "Parameters": {
            "Optional": {
                "WHERE clause": "WHERE <search-query>",
                "append": "append=<bool>",
                "start": "start=<int>"
            },
            "Required": {
                "<filename>": "<string>",
                "<tablename>": "<string>"
            }
        },
        "Related commands": "inputcsv, join, lookup, outputlookup",
        "Supported functions and syntax": "| inputlookup [append=<bool>] [start=<int>] [max=<int>] [<filename> | <tablename>] [WHERE <search-query>]"
    },
    {
        "Command_Name": "iplocation",
        "Description": "Extracts location information from IP addresses.",
        "Parameters": {
            "Optional": {
                "allfields": "allfields=<bool>",
                "lang": "lang=<string>",
                "prefix": "prefix=<string>"
            },
            "Required": {
                "ip-address-fieldname": "<field>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "iplocation [prefix=<string>] [allfields=<bool>] [lang=<string>] <ip-address-fieldname>"
    },
    {
        "Command_Name": "join",
        "Description": "Combine the results of a subsearch with the results of a main search.",
        "Parameters": {
            "Optional": {
                "earlier": "earlier=<bool>",
                "field-list": "<field>, <field>, ...",
                "join-options": "type=(inner | outer | left) | usetime=<bool> | earlier=<bool> | overwrite=<bool> | max=<int>",
                "max": "max=<int>",
                "overwrite": "overwrite=<bool>",
                "type": "type=inner | outer | left",
                "usetime": "usetime=<bool>"
            },
            "Required": {
                "subsearch": "\"[\" subsearch \"]\""
            }
        },
        "Related commands": "appendcols, lookup, selfjoin",
        "Supported functions and syntax": "join [join-options...] [field-list] subsearch"
    },
    {
        "Command_Name": "kmeans",
        "Description": "Performs k-means clustering on selected fields.",
        "Parameters": {
            "Optional": {
                "cnumfield": "cfield=<field>",
                "distype": "dt= ( l1 | l1norm | cityblock | cb ) | ( l2 | l2norm | sq | sqeuclidean ) | ( cos | cosine )",
                "field-list": "<field> ...",
                "iters": "maxiters=<int>",
                "k": "k=<int> | <int>-<int>",
                "kmeans-options": "<reps> | <iters> | <t> | <k> | <cnumfield> | <distype> | <showcentroid>",
                "reps": "reps=<int>",
                "showcentroid": "showcentroid= true | false",
                "t": "t=<num>"
            },
            "Required": {}
        },
        "Related commands": "anomalies, anomalousvalue, cluster, outlier",
        "Supported functions and syntax": "kmeans [kmeans-options...] [field-list]"
    },
    {
        "Command_Name": "kvform",
        "Description": "Extracts values from search results, using a form template.",
        "Parameters": {
            "Optional": {
                "field": "field=<field_name>",
                "form": "form=<string>"
            },
            "Required": {}
        },
        "Related commands": "extract, kvform, multikv, xmlkv, rex",
        "Supported functions and syntax": "kvform [form=<string>] [field=<field>]"
    },
    {
        "Command_Name": "loadjob",
        "Description": "Loads events or results of a previously completed search job.",
        "Parameters": {
            "Optional": {
                "artifact_offset": "artifact_offset=<int>",
                "delegate": "job_delegate=<string>",
                "ignore_running": "ignore_running=<bool>",
                "result-event": "events=<bool>"
            },
            "Required": {
                "savedsearch": "savedsearch=\"<user-string>:<app-string>:<search-name-string>\"",
                "sid": "<string>"
            }
        },
        "Related commands": "inputcsv",
        "Supported functions and syntax": "| loadjob (<sid> | <savedsearch>) [<result-event>] [<delegate>] [<artifact_offset>] [<ignore_running>]"
    },
    {
        "Command_Name": "localize",
        "Description": "Returns a list of the time ranges in which the search results were found.",
        "Parameters": {
            "Optional": {
                "maxpause": "maxpause=<int>(s|m|h|d)",
                "timeafter": "timeafter=<int>(s|m|h|d)",
                "timebefore": "timebefore=<int>(s|m|h|d)"
            },
            "Required": {}
        },
        "Related commands": "map, transaction",
        "Supported functions and syntax": "localize [<maxpause>] [<timeafter>] [<timebefore>]"
    },
    {
        "Command_Name": "localop",
        "Description": "Run subsequent commands, that is all commands following this, locally and not on remote peers.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "localop"
    },
    {
        "Command_Name": "lookup",
        "Description": "Explicitly invokes field value lookups.",
        "Parameters": {
            "Optional": {
                "<event-destfield>": "<string>",
                "<event-field>": "<string>",
                "<lookup-destfield>": "<string>",
                "<lookup-field>": "<string>",
                "local": "local=<bool>",
                "update": "update=<bool>"
            },
            "Required": {
                "<lookup-table-name>": "<string>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "lookup [local=<bool>] [update=<bool>] <lookup-table-name> ( <lookup-field> [AS <event-field>] )... [ OUTPUT | OUTPUTNEW (<lookup-destfield> [AS <event-destfield>] )... ]"
    },
    {
        "Command_Name": "makecontinuous",
        "Description": "Makes a field that is supposed to be the x-axis continuous (invoked by chart/timechart)",
        "Parameters": {
            "Optional": {
                "<log-span>": "[<num>]log[<num>]",
                "<span>": "<int>",
                "<start-end>": "end=<num> | start=<num>",
                "<timescale>": "<sec> | <min> | <hr> | <day> | <month> | <subseconds>",
                "bins": "bins=<int>",
                "span": "<log-span> | <span-length>",
                "span-length": "<span>[<timescale>]"
            },
            "Required": {}
        },
        "Related commands": "chart, timechart",
        "Supported functions and syntax": "makecontinuous [<field>] <bins-options>..."
    },
    {
        "Command_Name": "makemv",
        "Description": "Change a specified field into a multivalued field during a search.",
        "Parameters": {
            "Optional": {
                "allowempty": "allowempty=<bool>",
                "delim": "delim=<string>",
                "setsv": "setsv=<bool>",
                "tokenizer": "tokenizer=<string>"
            },
            "Required": {
                "field": "<field>"
            }
        },
        "Related commands": "mvcombine, mvexpand, nomv",
        "Supported functions and syntax": "makemv [delim=<string> | tokenizer=<string>] [allowempty=<bool>] [setsv=<bool>] <field>"
    },
    {
        "Command_Name": "makeresults",
        "Description": "Creates a specified number of empty search results.",
        "Parameters": {
            "Optional": {
                "<annotate>": "annotate=<bool>",
                "<count>": "count=<num>",
                "<splunk-server-group>": "(splunk_server_group=<string>)...",
                "<splunk-server>": "splunk_server=<string>"
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "| makeresults [<count>] [<annotate>] [<splunk-server>] [<splunk-server-group>...]"
    },
    {
        "Command_Name": "map",
        "Description": "A looping operator, performs a search over each search result.",
        "Parameters": {
            "Optional": {
                "maxsearches": "maxsearches=<int>"
            },
            "Required": {
                "<savedsplunkoption>": "<string>",
                "<searchoption>": "search=\"<string>\""
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "map (<searchoption> | <savedsplunkoption>) [maxsearches=int]"
    },
    {
        "Command_Name": "mcollect",
        "Description": "Converts search results into metric data and inserts the data into a metric index on the search head.",
        "Parameters": {
            "Optional": {
                "file": "file=<string>",
                "host": "host=<string>",
                "prefix_field": "prefix_field=<string>",
                "source": "source=<string>",
                "sourcetype": "sourcetype=<string>",
                "split": "split=<bool>",
                "spool": "spool=<bool>"
            },
            "Required": {
                "field-list": "<field>, ...",
                "index": "index=<string>"
            }
        },
        "Related commands": "collect, meventcollect",
        "Supported functions and syntax": "mcollect index=<string> [file=<string>] [split=<bool>] [spool=<bool>] [prefix_field=<string>]\n[host=<string>] [source=<string>] [sourcetype=<string>] [<field-list>]"
    },
    {
        "Command_Name": "metadata",
        "Description": "Returns a list of source, sourcetypes, or hosts from a specified index or distributed search peer.",
        "Parameters": {
            "Optional": {
                "index-specifier": "index=<index_name>",
                "splunk_server": "splunk_server=<wc-string>",
                "splunk_server_group": "splunk_server_group=<wc-string>..."
            },
            "Required": {
                "type": "type= hosts | sources | sourcetypes"
            }
        },
        "Related commands": "dbinspect",
        "Supported functions and syntax": "| metadata type=<metadata-type> [<index-specifier>]...  [splunk_server=<wc-string>] [splunk_server_group=<wc-string>]..."
    },
    {
        "Command_Name": "metasearch",
        "Description": "Retrieves event metadata from indexes based on terms in the logical expression.",
        "Parameters": {
            "Optional": {
                "<cmp>": "= |\u00a0!= | < | <= | > | >=",
                "<comparison-expression>": "<field><cmp><value>",
                "<field>": "<string>",
                "<index-expression>": "\"<string>\"|<term>|<search-modifier>",
                "<lit-value>": "<string> | <num>",
                "<logical-expression>": "<time-opts>|<search-modifier>|((NOT)? <logical-expression>)|<index-expression>|<comparison-expression>|(<logical-expression> (OR)? <logical-expression>)",
                "<search-modifier>": "<field-specifier>|<savedsplunk-specifier>|<tag-specifier>",
                "<time-modifier>": "earliest=<time_modifier> | latest=<time_modifier>",
                "<time-opts>": "(<timeformat>)? (<time-modifier>)*",
                "<timeformat>": "timeformat=<string>",
                "<value>": "<lit-value> | <field>"
            },
            "Required": {}
        },
        "Related commands": "metadata, search",
        "Supported functions and syntax": "metasearch [<logical-expression>]"
    },
    {
        "Command_Name": "meventcollect",
        "Description": "Converts search results into metric data and inserts the data into a metric index on the indexers.",
        "Parameters": {
            "Optional": {
                "host": "host=<string>",
                "prefix_field": "prefix_field=<string>",
                "source": "source=<string>",
                "sourcetype": "sourcetype=<string>",
                "split": "split=<bool>",
                "spool": "spool=<bool>"
            },
            "Required": {
                "field-list": "<field>, ...",
                "index": "index=<string>"
            }
        },
        "Related commands": "collect, mcollect",
        "Supported functions and syntax": "meventcollect index=<string> [split=<bool>] [spool=<bool>] [prefix_field=<string>]\n[host=<string>] [source=<string>] [sourcetype=<string>] [<field-list>]"
    },
    {
        "Command_Name": "mstats",
        "Description": "Calculates statistics for the measurement, metric_name, and dimension fields in metric indexes.",
        "Parameters": {
            "Optional": {
                "<comparison-expression>": "<field><comparison-operator><value> | <field> IN (<value-list>)",
                "<comparison-operator>": "=  | \u00a0!=  |  <  |  <=  |  >  | >=",
                "<field-list>": "<field>, ...",
                "<field>": "<string>",
                "<host-specifier>": "host=<string>",
                "<index-expression>": "<term> | <search-modifier>",
                "<logical-expression>": "<time-opts>|<search-modifier>|((NOT)? <logical-expression>)|<index-expression>|<comparison-expression>|(<logical-expression> (OR)? <logical-expression>)",
                "<search-modifier>": "<sourcetype-specifier> | <host-specifier> | <source-specifier> | <splunk_server-specifier>",
                "<source-specifier>": "source=<string>",
                "<sourcetype-specifier>": "sourcetype=<string>",
                "<span-length>": "span=<int><timescale>",
                "<splunk_server-specifier>": "splunk_server=<string>",
                "<string>": "\"<string>\"",
                "<time-modifier>": "starttime=<string> | endtime=<string> | earliest=<time_modifier> | latest=<time_modifier>",
                "<time-opts>": "[<timeformat>] (<time-modifier>)*",
                "<timeformat>": "timeformat=<string>",
                "<timescale>": "<sec> | <min> | <hr> | <day> | <month>",
                "<value-list>": "(<literal-value>, <literal-value>, ...)",
                "<value>": "<literal-value>",
                "append": "append=<bool>",
                "backfill": "backfill=<bool>",
                "endtime": "endtime=<string>",
                "prestats": "prestats=true | false",
                "starttime": "starttime=<string>",
                "update_period": "update_period=<integer>"
            },
            "Required": {
                "<stats-metric-term>": "(<stats-func>\"(\"<metric_name>\")\" [AS <string>])..."
            }
        },
        "Related commands": "stats, tstats",
        "Supported functions and syntax": "| mstats [prestats=<bool>] [append=<bool>] [backfill=<bool>] [update_period=<integer>] <stats-metric-term>... \nWHERE [<logical-expression>]... [ (BY) <field-list> ] [<span-length>] "
    },
    {
        "Command_Name": "multikv",
        "Description": "Extracts field-values from table-formatted events.",
        "Parameters": {
            "Optional": {
                "<multikv-option>": "copyattrs=<bool> | fields <field-list> | filter <term-list> | forceheader=<int> | multitable=<bool> | noheader=<bool> | rmorig=<bool>",
                "conf": "conf=<stanza_name>",
                "copyattrs": "copyattrs=<bool>",
                "fields": "fields <field-list>",
                "filter": "filter <term-list>",
                "forceheader": "forceheader=<int>",
                "multitable": "multitable=<bool>",
                "noheader": "noheader=<bool>",
                "rmorig": "rmorig=<bool>"
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "multikv [conf=<stanza_name>] [<multikv-option>...]"
    },
    {
        "Command_Name": "multisearch",
        "Description": "Run multiple streaming searches at the same time.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "<subsearch>": "\"[\"search <logical-expression>\"]\""
            }
        },
        "Related commands": "append, join",
        "Supported functions and syntax": "| multisearch <subsearch1> <subsearch2> <subsearch3> ..."
    },
    {
        "Command_Name": "mvcombine",
        "Description": "Combines events in search results that have a single differing field value into one result with a multivalue field of the differing field.",
        "Parameters": {
            "Optional": {
                "delim": "delim=<string>"
            },
            "Required": {
                "field": "<field>"
            }
        },
        "Related commands": "mvexpand, makemv, nomv",
        "Supported functions and syntax": "mvcombine [delim=<string>] <field>"
    },
    {
        "Command_Name": "mvexpand",
        "Description": "Expands the values of a multivalue field into separate events for each value of the multivalue field.",
        "Parameters": {
            "Optional": {
                "limit": "limit=<int>"
            },
            "Required": {
                "field": "<field>"
            }
        },
        "Related commands": "mvcombine, makemv, nomv",
        "Supported functions and syntax": "mvexpand <field> [limit=<int>]"
    },
    {
        "Command_Name": "nomv",
        "Description": "Changes a specified multivalued field into a single-value field at search time.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "field": "<field>"
            }
        },
        "Related commands": "makemv, mvcombine, mvexpand",
        "Supported functions and syntax": "nomv <field>"
    },
    {
        "Command_Name": "outlier",
        "Description": "Removes outlying numerical values.",
        "Parameters": {
            "Optional": {
                "<action>": "action=remove | transform",
                "<field-list>": "<field> ...",
                "<mark>": "mark=<bool>",
                "<outlier-options>": "<action> | <mark> | <param> | <uselower>",
                "<param>": "param=<num>",
                "<uselower>": "uselower=<bool>"
            },
            "Required": {}
        },
        "Related commands": "anomalies, anomalousvalue, cluster, kmeans",
        "Supported functions and syntax": "outlier <outlier-options>... [<field-list>]"
    },
    {
        "Command_Name": "outputcsv",
        "Description": "Outputs search results to a specified CSV file.",
        "Parameters": {
            "Optional": {
                "append": "append=<bool>",
                "create_empty": "create_empty=<bool>",
                "dispatch": "dispatch=<bool>",
                "filename": "<filename>",
                "override_if_empty": "override_if_empty=<bool>",
                "singlefile": "singlefile=<bool>",
                "usexml": "usexml=<bool>"
            },
            "Required": {}
        },
        "Related commands": "inputcsv, outputtext",
        "Supported functions and syntax": "outputcsv [append=<bool>] [create_empty=<bool>] [override_if_empty=<bool>] [dispatch=<bool>] [usexml=<bool>] [singlefile=<bool>] [<filename>]"
    },
    {
        "Command_Name": "outputlookup",
        "Description": "Writes search results to the specified static lookup table.",
        "Parameters": {
            "Optional": {
                "append": "append=<bool>",
                "create_empty": "create_empty=<bool>",
                "createinapp": "createinapp=<bool>",
                "key_field": "key_field=<field>",
                "max": "max=<int>",
                "output_format": "output_format=splunk_sv_csv | splunk_mv_csv",
                "override_if_empty": "override_if_empty=<bool>"
            },
            "Required": {
                "filename": "<string>",
                "tablename": "<string>"
            }
        },
        "Related commands": "inputlookup, lookup, outputcsv",
        "Supported functions and syntax": "The required syntax is in bold."
    },
    {
        "Command_Name": "outputtext",
        "Description": "Outputs the raw text field (_raw) of results into the _xml field.",
        "Parameters": {
            "Optional": {
                "usexml": "usexml=<bool>"
            },
            "Required": {}
        },
        "Related commands": "outputcsv",
        "Supported functions and syntax": "outputtext [usexml=<bool>]"
    },
    {
        "Command_Name": "overlap",
        "Description": "Finds events in a summary index that overlap in time or have missed events.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "collect",
        "Supported functions and syntax": "overlap"
    },
    {
        "Command_Name": "pivot",
        "Description": "Run pivot searches against a particular data model dataset.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "<cellvalue>": "<function>(fieldname) [AS <label>]",
                "Filter <filter expression>": "<fieldname> <comparison-operator> <value>",
                "Limit <limit expression>": "LIMIT <fieldname> BY <limittype> <number> <stats-function>(<fieldname>)",
                "SPLITCOL colvalue <options>": "fieldname [ RANGE start=<value> end=<value> max=<value> size=<value>] [PERIOD (auto | year | month| day | hour | minute | second)] [TRUELABEL <label>] [FALSELABEL <label>]",
                "SPLITROW <rowvalue>": "SPLITROW <field> [AS <label>] [RANGE start=<value> end=<value> max=<value> size=<value>] [PERIOD (auto | year | month | day | hour | minute | second)] [TRUELABEL <label>] [FALSELABEL <label>]",
                "datamodel-name": "<string>",
                "objectname": "<string>",
                "pivot element": "(<cellvalue>)* (SPLITROW <rowvalue>)* (SPLITCOL colvalue [options])* (FILTER <filter expression>)* (LIMIT <limit expression>)* (ROWSUMMARY <true | false>)* (COLSUMMARY <true | false>)*  (SHOWOTHER <true | false>)*  (NUMCOLS <num>)* (rowsort [options])*"
            }
        },
        "Related commands": "datamodel",
        "Supported functions and syntax": "| pivot <datamodel-name> <object-name> <pivot-element>"
    },
    {
        "Command_Name": "predict",
        "Description": "Enables you to use time series algorithms to predict future values of fields.",
        "Parameters": {
            "Optional": {
                "<newfield>": "<string>",
                "<predict_options>": "algorithm=<algorithm_name> | correlate_field=<field> | future_timespan=<number> | holdback=<number> | period=<number> | suppress=<bool> | lowerXX=<field> | upperYY=<field>",
                "algorithm": "algorithm= LL | LLT | LLP | LLP5 | LLB | BiLL",
                "correlate": "correlate=<field>",
                "future_timespan": "future_timespan=<num>",
                "holdback": "holdback=<num>",
                "lowerXX": "lower<int>=<field>",
                "period": "period=<num>",
                "suppress": "suppress=<field>",
                "upperYY": "upper<int>=<field>"
            },
            "Required": {
                "<field-list>": "<field>..."
            }
        },
        "Related commands": "x11",
        "Supported functions and syntax": "predict <field-list> [AS <newfield>] [<predict_options>]"
    },
    {
        "Command_Name": "rangemap",
        "Description": "Sets RANGE field to the name of the ranges that match.",
        "Parameters": {
            "Optional": {
                "attribute_name=numeric_range": "<string>=<num>-<num>",
                "default": "default=<string>"
            },
            "Required": {
                "field": "field=<string>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "rangemap field=<string> (<attribute_name>=<numeric_range>)... [default=<string>]"
    },
    {
        "Command_Name": "rare",
        "Description": "Displays the least common values of a field.",
        "Parameters": {
            "Optional": {
                "<by-clause>": "BY <field-list>",
                "<top-options>": "countfield=<string> | limit=<int> | percentfield=<string> | showcount=<bool> | showperc=<bool>",
                "countfield": "countfield=<string>",
                "limit": "limit=<int>",
                "percentfield": "percentfield=<string>",
                "showcount": "showcount=<bool>",
                "showperc": "showperc=<bool>"
            },
            "Required": {
                "<field-list>": "<string>,..."
            }
        },
        "Related commands": "sirare, stats, top",
        "Supported functions and syntax": "rare [<top-options>...] <field-list> [<by-clause>]"
    },
    {
        "Command_Name": "regex",
        "Description": "Removes results that do not match the specified regular expression.",
        "Parameters": {
            "Optional": {
                "<field>": "<field>"
            },
            "Required": {
                "<regex-expression>": "\"<string>\""
            }
        },
        "Related commands": "rex, search",
        "Supported functions and syntax": "regex (<field>=<regex-expression> | <field>!=<regex-expression> | <regex-expression>)"
    },
    {
        "Command_Name": "relevancy",
        "Description": "Calculates how well the event matches the query.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "relevancy"
    },
    {
        "Command_Name": "reltime",
        "Description": "Converts the difference between 'now' and '_time' to a human-readable value and adds adds this value to the field, 'reltime', in your search results.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "convert",
        "Supported functions and syntax": "reltime"
    },
    {
        "Command_Name": "rename",
        "Description": "Renames a specified field; wildcards can be used to specify multiple fields.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "wc-field": "<string>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "rename <wc-field> AS <wc-field>..."
    },
    {
        "Command_Name": "replace",
        "Description": "Replaces values of specified fields with a specified new value.",
        "Parameters": {
            "Optional": {
                "field-list": "<string>  ..."
            },
            "Required": {
                "wc-string": "<string>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "replace (<wc-string> WITH <wc-string>)... [IN <field-list>]"
    },
    {
        "Command_Name": "rest",
        "Description": "Access a REST endpoint and display the returned entities as search results.",
        "Parameters": {
            "Optional": {
                "count": "count=<int>",
                "get-arg-name": "<string>",
                "get-arg-value": "<string>",
                "splunk_server": "splunk_server=<wc-string>",
                "splunk_server_group": "splunk_server_group=<wc-string>...",
                "timeout": "timeout=<int>"
            },
            "Required": {
                "rest-uri": "<uri>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "| rest <rest-uri> [count=<int>] [splunk_server=<wc-string>] [splunk_server_group=<wc-string>]... [timeout=<int>] [<get-arg-name>=<get-arg-value>]..."
    },
    {
        "Command_Name": "return",
        "Description": "Specify the values to return from a subsearch.",
        "Parameters": {
            "Optional": {
                "<$field>": "<$field>",
                "<alias>": "<alias>=<field>...",
                "<count>": "<int>",
                "<field>": "<field>..."
            },
            "Required": {}
        },
        "Related commands": "format, search",
        "Supported functions and syntax": "return [<count>] [<alias>=<field>...] [<field>...] [$<field>...]"
    },
    {
        "Command_Name": "reverse",
        "Description": "Reverses the order of the results.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "head, sort, tail",
        "Supported functions and syntax": "reverse"
    },
    {
        "Command_Name": "rex",
        "Description": "Specify a Perl regular expression named groups to extract fields while you search.",
        "Parameters": {
            "Optional": {
                "field": "field=<field>",
                "max_match": "max_match=<int>",
                "offset_field": "offset_field=<string>"
            },
            "Required": {
                "mode": "mode=sed",
                "regex-expression": "\"<string>\"",
                "sed-expression": "\"<string>\""
            }
        },
        "Related commands": "extract, kvform, multikv, xmlkv, regex",
        "Supported functions and syntax": "The required syntax is in bold."
    },
    {
        "Command_Name": "rtorder",
        "Description": "Buffers events from real-time search to emit them in ascending time order when possible.",
        "Parameters": {
            "Optional": {
                "buffer_span": "buffer_span=<span-length>",
                "discard": "discard=<bool>",
                "max_buffer_size": "max_buffer_size=<int>"
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "rtorder [discard=<bool>] [buffer_span=<span-length>] [max_buffer_size=<int>]"
    },
    {
        "Command_Name": "savedsearch",
        "Description": "Returns the search results of a saved search.",
        "Parameters": {
            "Optional": {
                "replacement": "<field>=<string>",
                "savedsearch-options": "<substitution-control> | <replacement>",
                "substitution-control": "nosubstitution=<bool>"
            },
            "Required": {
                "savedsearch_name": "<string>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "| savedsearch <savedsearch_name> [<savedsearch-options>...]"
    },
    {
        "Command_Name": "script",
        "Description": "Runs an external Perl or Python script as part of your search.",
        "Parameters": {
            "Optional": {
                "maxinputs": "maxinputs=<int>",
                "script-arg": "<string> ..."
            },
            "Required": {
                "script-name": "<string>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "script <script-name> [<script-arg>...] [maxinputs=<int>]"
    },
    {
        "Command_Name": "scrub",
        "Description": "Anonymizes the search results.",
        "Parameters": {
            "Optional": {
                "dictionary": "dictionary=<filename>",
                "name-terms": "name-terms=<filename>",
                "namespace": "namespace=<string>",
                "private-terms": "private-terms=<filename>",
                "public-terms": "public-terms=<filename>",
                "timeconfig": "timeconfig=<filename>"
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "scrub  [public-terms=<filename>] [private-terms=<filename>] [name-terms=<filename>] [dictionary=<filename>] [timeconfig=<filename>] [namespace=<string>]"
    },
    {
        "Command_Name": "search",
        "Description": "Searches indexes for matching events.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "<comparison-expression>": "<field><comparison-operator><value> | <field> IN (<value-list>)",
                "<comparison-operator>": "=  | \u00a0!=  |  <  |  <=  |  >  | >=",
                "<eventtype-specifier>": "eventtype=<string>",
                "<eventtypetag-specifier>": "eventtypetag=<string>",
                "<field>": "<string>",
                "<host-specifier>": "host=<string>",
                "<hosttag-specifier>": "hosttag=<string>",
                "<index-expression>": "\"<string>\" | <term> | <search-modifier>",
                "<logical-expression>": "<logical-expression> | <time-opts> | <search-modifier> | NOT <logical-expression> | <index-expression> | <comparison-expression> | <logical-expression> [OR] <logical-expression>",
                "<savedsplunk-specifier>": "savedsearch=<string> | savedsplunk=<string>",
                "<search-modifier>": "<sourcetype-specifier> | <host-specifier> | <hosttag-specifier> | <source-specifier> | <savedsplunk-specifier> | <eventtype-specifier> | <eventtypetag-specifier> | <splunk_server-specifier>",
                "<source-specifier>": "source=<string>",
                "<sourcetype-specifier>": "sourcetype=<string>",
                "<splunk_server-specifier>": "splunk_server=<string>",
                "<string>": "\"<string>\"",
                "<time-modifier>": "starttime=<string> | endtime=<string> | earliest=<time_modifier> | latest=<time_modifier>",
                "<time-opts>": "[<timeformat>] (<time-modifier>)...",
                "<timeformat>": "timeformat=<string>",
                "<value-list>": "(<literal-value>, <literal-value>, ...)",
                "<value>": "<literal-value>",
                "endtime": "endtime=<string>",
                "starttime": "starttime=<string>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "search <logical-expression>"
    },
    {
        "Command_Name": "searchtxn",
        "Description": "Finds transaction events within specified search constraints.",
        "Parameters": {
            "Optional": {
                "eventsonly": "eventsonly=<bool>",
                "max_terms": "maxterms=<int>",
                "use_disjunct": "use_disjunct=<bool>"
            },
            "Required": {
                "<search-string>": "<string>",
                "<transaction-name>": "<transactiontype>"
            }
        },
        "Related commands": "transaction",
        "Supported functions and syntax": "| searchtxn <transaction-name> [max_terms=<int>] [use_disjunct=<bool>] [eventsonly=<bool>] <search-string>"
    },
    {
        "Command_Name": "selfjoin",
        "Description": "Joins results with itself.",
        "Parameters": {
            "Optional": {
                "<selfjoin-options>": "overwrite=<bool> | max=<int> | keepsingle=<bool>",
                "keepsingle": "keepsingle=<bool>",
                "max": "max=<int>"
            },
            "Required": {
                "<field-list>": "<field>..."
            }
        },
        "Related commands": "join",
        "Supported functions and syntax": "selfjoin [<selfjoin-options>...] <field-list>"
    },
    {
        "Command_Name": "sendemail",
        "Description": "Emails search results to a specified email address.",
        "Parameters": {
            "Optional": {
                "bcc": "bcc=<email_list>",
                "cc": "cc=<email_list>",
                "content_type": "content_type=html | plain",
                "footer": "footer=<string>",
                "format": "format=csv | raw | table",
                "from": "from=<email_list>",
                "graceful": "graceful=<boolean>",
                "inline": "inline=<boolean>",
                "maxinputs": "maxinputs=<integer>",
                "maxtime": "maxtime=<integer>m | s | h | d",
                "message": "message=<string>",
                "paperorientation": "paperorientation=portrait | landscape",
                "papersize": "papersize=letter | legal | ledger | a2 | a3 | a4 | a5",
                "pdfview": "pdfview=<string>",
                "priority": "priority=highest | high | normal | low | lowest",
                "sendcsv": "sendcsv=<boolean>",
                "sendpdf": "sendpdf=<boolean>",
                "sendresults": "sendresults=<boolean>",
                "server": "server=<string>",
                "subject": "subject=<string>",
                "use_ssl": "use_ssl=<boolean>",
                "use_tls": "use_tls=<boolean>",
                "width_sort_columns": "width_sort_columns=<boolean>"
            },
            "Required": {
                "to": "to=<email_list>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "sendemail to=<email_list> "
    },
    {
        "Command_Name": "set",
        "Description": "Performs set operations (union, diff, intersect) on subsearches.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "subsearch": "\"[\" <string> \"]\"",
                "union | diff | intersect": "union | diff | intersect"
            }
        },
        "Related commands": "append, appendcols, join, diff",
        "Supported functions and syntax": "| set (union | diff | intersect) subsearch subsearch"
    },
    {
        "Command_Name": "setfields",
        "Description": "Sets the field values for all results to a common value.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "<setfields-arg>": "string=\"<string>\", ..."
            }
        },
        "Related commands": "eval, fillnull, rename",
        "Supported functions and syntax": "setfields <setfields-arg>, ..."
    },
    {
        "Command_Name": "sichart",
        "Description": "Summary indexing version of chart.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "chart, sitimechart, timechart",
        "Supported functions and syntax": "sichart [sep=<string>] [format=<string>] [cont=<bool>] [limit=<int>] [agg=<stats-agg-term>] ( <stats-agg-term> | <sparkline-agg-term> | \"(\"<eval-expression>\")\" )... [ BY <field> [<bins-options>... ] [<split-by-clause>] ] | [ OVER <field> [<bins-options>...] [BY <split-by-clause>] ]"
    },
    {
        "Command_Name": "sirare",
        "Description": "Summary indexing version of rare.",
        "Parameters": {
            "Optional": {
                "<by-clause>": "BY <field-list>",
                "<top-options>": "countfield=<string> | limit=<int> | percentfield=<string> | showcount=<bool> | showperc=<bool>",
                "countfield": "countfield=<string>",
                "limit": "limit=<int>",
                "percentfield": "percentfield=<string>",
                "showcount": "showcount=<bool>",
                "showpercent": "showpercent=<bool>"
            },
            "Required": {
                "<field-list>": "<string>,..."
            }
        },
        "Related commands": "rare",
        "Supported functions and syntax": "sirare [<top-options>...] <field-list> [<by-clause>]"
    },
    {
        "Command_Name": "sistats",
        "Description": "Summary indexing version of stats.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "stats",
        "Supported functions and syntax": "sistats [allnum=<bool>] [delim=<string>] ( <stats-agg-term> | <sparkline-agg-term> ) [<by clause>]"
    },
    {
        "Command_Name": "sitimechart",
        "Description": "Summary indexing version of timechart.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "chart, sichart, timechart",
        "Supported functions and syntax": "Syntax"
    },
    {
        "Command_Name": "sitop",
        "Description": "Summary indexing version of top.",
        "Parameters": {
            "Optional": {
                "<N>": "<int>",
                "<by-clause>": "BY <field-list>",
                "<top-options>": "countfield=<string> | limit=<int> | otherstr=<string> | percentfield=<string> | showcount=<bool> | showperc=<bool> | useother=<bool>",
                "countfield": "countfield=<string>",
                "limit": "limit=<int>",
                "otherstr": "otherstr=<string>",
                "percentfield": "percentfield=<string>",
                "showcount": "showcount=<bool>",
                "showperc": "showperc=<bool>",
                "useother": "useother=<bool>"
            },
            "Required": {
                "<field-list>": "<field>, ..."
            }
        },
        "Related commands": "top",
        "Supported functions and syntax": "sitop [<N>] [<top-options>...] <field-list> [<by-clause>]"
    },
    {
        "Command_Name": "sort",
        "Description": "Sorts search results by the specified fields.",
        "Parameters": {
            "Optional": {
                "<count>": "<int>",
                "<field>": "<string>",
                "<sort-field>": "<field> |  auto(<field>) | str(<field>) | ip(<field>) | num(<field>)",
                "auto": "auto(<field>)",
                "desc": "d | desc",
                "ip": "ip(<field>)",
                "num": "num(<field>)",
                "str": "str(<field>)"
            },
            "Required": {
                "<sort-by-clause>": "( - | + ) <sort-field>,  ( - | + ) <sort-field> ..."
            }
        },
        "Related commands": "reverse",
        "Supported functions and syntax": "sort [<count>] <sort-by-clause>... [desc]"
    },
    {
        "Command_Name": "spath",
        "Description": "Provides a straightforward means for extracting fields from structured data formats, XML and JSON.",
        "Parameters": {
            "Optional": {
                "input": "input=<field>",
                "output": "output=<field>",
                "path": "path=<datapath> | <datapath>"
            },
            "Required": {}
        },
        "Related commands": "xpath",
        "Supported functions and syntax": "spath [input=<field>]  [output=<field>] [path=<datapath> | <datapath>]"
    },
    {
        "Command_Name": "stats",
        "Description": "Provides statistics, grouped optionally by fields. See also, Statistical and charting functions.",
        "Parameters": {
            "Optional": {
                "allnum": "allnum=<bool>",
                "by-clause": "BY <field-list>",
                "dedup_splitvals": "dedup_splitvals=<boolean>",
                "delim": "delim=<string>",
                "partitions": "partitions=<num>",
                "sparkline-agg": "sparkline (count(<wc-field>), <span-length>) | sparkline (<sparkline-func>(<wc-field>), <span-length>)",
                "sparkline-func": "c() | count() | dc() | mean() | avg() | stdev() | stdevp() | var() | varp() | sum() | sumsq() | min() | max() | range()",
                "stats-func": "The syntax depends on the function that you use. Refer to the table below."
            },
            "Required": {
                "sparkline-agg-term": "<sparkline-agg> [AS <wc-field>]",
                "stats-agg-term": "<stats-func>(<evaled-field> | <wc-field>) [AS <wc-field>]"
            }
        },
        "Related commands": "eventstats, top, rare",
        "Supported functions and syntax": "Simple: stats (stats-function(field) [AS field])... [BY field-list]"
    },
    {
        "Command_Name": "strcat",
        "Description": "Concatenates string values.",
        "Parameters": {
            "Optional": {
                "allrequired": "allrequired=<bool>"
            },
            "Required": {
                "<dest-field>": "<string>",
                "<source-fields>": "(<field> | <quoted-str>)...",
                "quoted-str": "\"<string>\""
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "strcat [allrequired=<bool>] <source-fields> <dest-field>"
    },
    {
        "Command_Name": "streamstats",
        "Description": "Adds summary statistics to all search results in a streaming manner.",
        "Parameters": {
            "Optional": {
                "allnum": "allnum=<boolean>",
                "by-clause": "BY <field-list>",
                "current": "current=<boolean>",
                "global": "global=<boolean>",
                "reset_after": "reset_after=\"(\"<eval-expression>\")\"",
                "reset_before": "reset_before=\"(\"<eval-expression>\")\"",
                "reset_on_change": "reset_on_change=<bool>",
                "stats-func": "The syntax depends on the function that you use. Refer to the table below.",
                "time_window": "time_window=<span-length>",
                "window": "window=<integer>"
            },
            "Required": {
                "stats-agg-term": "<stats-func>( <evaled-field> | <wc-field>  ) [AS <wc-field>]"
            }
        },
        "Related commands": "eventstats, stats",
        "Supported functions and syntax": "streamstats [reset_on_change=<bool>] [reset_before=\"(\"<eval-expression>\")\"] [reset_after=\"(\"<eval-expression>\")\"] [current=<bool>] [window=<int>] [time_window=<span-length>] [global=<bool>] [allnum=<bool>] <stats-agg-term>... [<by-clause>]"
    },
    {
        "Command_Name": "table",
        "Description": "Creates a table using the specified fields.",
        "Parameters": {
            "Optional": {
                "<wc-field-list>": "<wc-field> <wc-field> ..."
            },
            "Required": {}
        },
        "Related commands": "fields",
        "Supported functions and syntax": "table <wc-field-list>"
    },
    {
        "Command_Name": "tags",
        "Description": "Annotates specified fields in your search results with tags.",
        "Parameters": {
            "Optional": {
                "inclname": "inclname=T | F",
                "inclvalue": "inclvalue=T | F",
                "outputfield": "outputfield=<field>"
            },
            "Required": {
                "<field-list>": "<field> <field> ..."
            }
        },
        "Related commands": "eval",
        "Supported functions and syntax": "tags [outputfield=<field>] [inclname=<bool>] [inclvalue=<bool>] <field-list>"
    },
    {
        "Command_Name": "tail",
        "Description": "Returns the last number n of specified results.",
        "Parameters": {
            "Optional": {
                "<N>": "<int>"
            },
            "Required": {}
        },
        "Related commands": "head, reverse",
        "Supported functions and syntax": "tail [<N>]"
    },
    {
        "Command_Name": "timechart",
        "Description": "Create a time series chart and corresponding table of statistics. See also, Statistical and charting functions.",
        "Parameters": {
            "Optional": {
                "<log-span>": "[<num>]log[<num>]",
                "<snap-to-time>": "[+|-] [<time_integer>] <relative_time_unit>@<snap_to_time_unit>",
                "<span-length>": "<int>[<timescale>]",
                "<start-end>": "end=<num> | start=<num>",
                "<timescale>": "<sec> | <min> | <hr> | <day> | <week> | <month> | <subseconds>",
                "<where-comp>": "<wherein-comp> | <wherethresh-comp>",
                "<wherein-comp>": "(in | notin) (top | bottom)<int>",
                "<wherethresh-comp>": "(< | >) {\" \"] <num>",
                "aligntime": "aligntime=(earliest | latest | <time-specifier>)",
                "bin-options": "bins | minspan | span | <start-end> | aligntime",
                "bins": "bins=<int>",
                "cont": "cont=<bool>",
                "dedup_splitvals": "dedup_splitvals=<boolean>",
                "fixedrange": "fixedrange=<bool>",
                "format": "format=<string>",
                "limit": "limit=<int>",
                "minspan": "minspan=<span-length>",
                "nullstr": "nullstr=<string>",
                "otherstr": "otherstr=<string>",
                "partial": "partial=<bool>",
                "sep": "sep=<string>",
                "span": "span=<log-span> | span=<span-length> | span=<snap-to-time>",
                "stats-func": "The syntax depends on the function that you use. Refer to the table below.",
                "tc-option": "<bin-options> | usenull=<bool> | useother=<bool> | nullstr=<string> | otherstr=<string>",
                "usenull": "usenull=<bool>",
                "useother": "useother=<bool>",
                "where clause": "<single-agg> <where-comp>"
            },
            "Required": {
                "eval-expression": "<math-exp> | <concat-exp> | <compare-exp> | <bool-exp> | <function-call>",
                "single-agg": "count | <stats-func>(<field>)",
                "split-by-clause": "<field> (<tc-options>)... [<where-clause>]"
            }
        },
        "Related commands": "chart, bucket",
        "Supported functions and syntax": "timechart [sep=<string>] [format=<string>] [partial=<bool>] [cont=<bool>] [limit=<int>]\n[agg=<stats-agg-term>] [<bin-options>... ]\n( (<single-agg> [BY <split-by-clause>] ) |  (<eval-expression>) BY <split-by-clause> )\n[<dedup_splitvals>]"
    },
    {
        "Command_Name": "timewrap",
        "Description": "Displays, or wraps, the output of the timechart command so that every timewrap-span range of time is a different series.",
        "Parameters": {
            "Optional": {
                "<timescale>": "<sec> | <min> | <hr> | <day> | <week> | <month> | <quarter> | <year>",
                "align": "align=now | end",
                "series": "series=relative | exact | short",
                "time_format": "time_format=<str>"
            },
            "Required": {
                "timewrap-span": "[<int>]<timescale>"
            }
        },
        "Related commands": "timechart",
        "Supported functions and syntax": "timewrap <timewrap-span> [align=now | end] [series=relative | exact | short] [time_format=<str>] "
    },
    {
        "Command_Name": "top",
        "Description": "Displays the most common values of a field.",
        "Parameters": {
            "Optional": {
                "<N>": "<int>",
                "<by-clause>": "BY <field-list>",
                "<top-options>": "countfield=<string> | limit=<int> | otherstr=<string> | percentfield=<string> | showcount=<bool> | showperc=<bool> | useother=<bool>",
                "countfield": "countfield=<string>",
                "limit": "limit=<int>",
                "otherstr": "otherstr=<string>",
                "percentfield": "percentfield=<string>",
                "showcount": "showcount=<bool>",
                "showperc": "showperc=<bool>",
                "useother": "useother=<bool>"
            },
            "Required": {
                "<field-list>": "<field>, <field>, ..."
            }
        },
        "Related commands": "rare, stats",
        "Supported functions and syntax": "top [<N>] [<top-options>...] <field-list> [<by-clause>]"
    },
    {
        "Command_Name": "transaction",
        "Description": "Groups search results into transactions.",
        "Parameters": {
            "Optional": {
                "<filter-string>": "<search-expression> | (<quoted-search-expression>) | eval(<eval-expression>)",
                "connected": "connected=<bool>",
                "delim": "delim=<string>",
                "endswith": "endswith=<filter-string>",
                "field-list": "<field> ...",
                "keepevicted": "keepevicted=<bool>",
                "keeporphans": "keeporphans=true | false",
                "maxevents": "maxevents=<int>",
                "maxopenevents": "maxopenevents=<int>",
                "maxopentxn": "maxopentxn=<int>",
                "maxpause": "maxpause=<int>[s | m | h | d]",
                "maxspan": "maxspan=<int>[s | m | h | d]",
                "memcontrol-options": "<maxopentxn> | <maxopenevents> | <keepevicted>",
                "mvlist": "mvlist= true | false | <field-list>",
                "mvraw": "mvraw=<bool>",
                "name": "name=<transaction-name>",
                "nullstr": "nullstr=<string>",
                "rendering-options": "<delim> | <mvlist> | <mvraw> | <nullstr>",
                "startswith": "startswith=<filter-string>",
                "txn_definition-options": "<maxspan> | <maxpause> | <maxevents> | <startswith> | <endswith> | <connected> | <unifyends> | <keeporphans>",
                "unifyends": "unifyends= true | false"
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "transaction [<field-list>] [name=<transaction-name>] [<txn_definition-options>...] [<memcontrol-options>...] [<rendering-options>...]"
    },
    {
        "Command_Name": "transpose",
        "Description": "Reformats rows of search results as columns.",
        "Parameters": {
            "Optional": {
                "column_name": "column_name=<string>",
                "header_field": "header_field=<field>",
                "include_empty": "include_empty=<bool>",
                "int": "<int>"
            },
            "Required": {}
        },
        "Related commands": "",
        "Supported functions and syntax": "transpose [int] [column_name=<string>] [header_field=<field>] [include_empty=<bool>]"
    },
    {
        "Command_Name": "trendline",
        "Description": "Computes moving averages of fields.",
        "Parameters": {
            "Optional": {
                "<newfield>": "<field>"
            },
            "Required": {
                "<field>": "\"(\"<field>\")\"",
                "period": "<num>",
                "trendtype": "syntax = sma | ema | wma"
            }
        },
        "Related commands": "timechart",
        "Supported functions and syntax": "trendline ( <trendtype><period>\"(\"<field>\")\" [AS <newfield>] )..."
    },
    {
        "Command_Name": "tscollect",
        "Description": "Writes results into tsidx file(s) for later use by tstats command.",
        "Parameters": {
            "Optional": {
                "keepresults": "keepresults = true | false",
                "namespace": "namespace=<string>",
                "squashcase": "squashcase = true | false"
            },
            "Required": {}
        },
        "Related commands": "collect, stats, tstats",
        "Supported functions and syntax": "... | tscollect [namespace=<string>] [squashcase=<bool>] [keepresults=<bool>]"
    },
    {
        "Command_Name": "tstats",
        "Description": "Calculates statistics over tsidx files created with the tscollect command.",
        "Parameters": {
            "Optional": {
                "<field-list>": "<field>, ...",
                "<timescale>": "<sec> | <min> | <hr> | <day> | <month>",
                "<timespan>": "auto | <int><timescale>",
                "PREFIX()": "PREFIX(<string>)",
                "allow_old_summaries": "allow_old_summaries=true | false",
                "append": "append=<bool>",
                "chunk_size": "chunk_size=<unsigned_int>",
                "datamodel": "datamodel=<data_model-name>",
                "fillnull_value": "fillnull_value=<string>",
                "include_reduced_buckets": "include_reduced_buckets=true | false",
                "local": "local=true | false",
                "namespace": "<string>",
                "prestats": "prestats=true | false",
                "sid": "sid=<tscollect-job-id>",
                "span": "span=<timespan>",
                "summariesonly": "summariesonly=<bool>"
            },
            "Required": {
                "<stats-func>": "(count [<field>] | <function>(PREFIX(<string>) | <field>))... [AS <string>]"
            }
        },
        "Related commands": "stats, tscollect",
        "Supported functions and syntax": "| tstats [prestats=<bool>] [local=<bool>] [append=<bool>] [summariesonly=<bool>] [include_reduced_buckets=<bool>] [allow_old_summaries=<bool>] [fillnull_value=<string>] [chunk_size=<unsigned int>] <stats-func>...  \n[FROM ( <namespace> | sid=<tscollect-job-id> | datamodel=<data_model-name> )] \n[WHERE <search-query> | <field> IN (<value-list>)] \n[BY (<field-list> | (PREFIX(<field>))) [span=<timespan>] ]"
    },
    {
        "Command_Name": "typeahead",
        "Description": "Returns typeahead information on a specified prefix.",
        "Parameters": {
            "Optional": {
                "collapse": "collapse=<bool>",
                "endtimeu": "endtimeu=<int>",
                "index-specifier": "index=<string>",
                "max_time": "max_time=<int>",
                "startimeu": "starttimeu=<int>"
            },
            "Required": {
                "count": "count=<int>",
                "prefix": "prefix=<string>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "| typeahead prefix=<string> count=<int> [max_time=<int>] [<index=<string>] [<starttimeu=<int>] [<endtimeu=<int>] [collapse=<bool>]"
    },
    {
        "Command_Name": "typelearner",
        "Description": "Generates suggested eventtypes.",
        "Parameters": {
            "Optional": {
                "grouping-field": "<field>",
                "grouping-maxlen": "maxlen=<int>"
            },
            "Required": {}
        },
        "Related commands": "typer",
        "Supported functions and syntax": "typelearner [<grouping-field>] [<grouping-maxlen>]"
    },
    {
        "Command_Name": "typer",
        "Description": "Calculates the eventtypes for the search results.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "typelearner",
        "Supported functions and syntax": "typer"
    },
    {
        "Command_Name": "union",
        "Description": "Merges the results from two or more datasets into one dataset.",
        "Parameters": {
            "Optional": {
                "subsearch-options": "maxtime=<int>  maxout=<int>  timeout=<int>"
            },
            "Required": {
                "dataset": " <dataset-type>:<dataset-name> | <subsearch>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "union [<subsearch-options>] <dataset> [<dataset>...]"
    },
    {
        "Command_Name": "uniq",
        "Description": "Removes any search that is an exact duplicate with a previous result.",
        "Parameters": {
            "Optional": {},
            "Required": {}
        },
        "Related commands": "dedup",
        "Supported functions and syntax": "uniq"
    },
    {
        "Command_Name": "untable",
        "Description": "Converts results from a tabular format to a format similar to stats output. Inverse of xyseries and maketable.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "<x-field>": "<field>",
                "<y-data-field>": "<field>",
                "<y-name-field>": "<field>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "untable <x-field> <y-name-field> <y-data-field>"
    },
    {
        "Command_Name": "where",
        "Description": "Performs arbitrary filtering on your data. See also, Evaluations functions.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "eval-expression": "<eval-mathematical-expression> | <eval-concatenate-expression> | <eval-comparison-expression> | <eval-boolean-expression> | <eval-function-call>"
            }
        },
        "Related commands": "eval",
        "Supported functions and syntax": "where <eval-expression>"
    },
    {
        "Command_Name": "x11",
        "Description": "Enables you to determine the trend in your data by removing the seasonal pattern.",
        "Parameters": {
            "Optional": {
                "<newfield>": "<string>",
                "<period>": "<int>",
                "<type>": "add() | mult()"
            },
            "Required": {
                "<fieldname>": "<field>"
            }
        },
        "Related commands": "predict",
        "Supported functions and syntax": "x11 [<type>] [<period>] (<fieldname>) [AS <newfield>] "
    },
    {
        "Command_Name": "xmlkv",
        "Description": "Extracts XML key-value pairs.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "maxinputs": "maxinputs=<int>"
            }
        },
        "Related commands": "extract, kvform, multikv, rex",
        "Supported functions and syntax": "xmlkv maxinputs=<int>"
    },
    {
        "Command_Name": "xmlunescape",
        "Description": "Unescapes XML.",
        "Parameters": {
            "Optional": {},
            "Required": {
                "maxinputs": "maxinputs=<int>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "xmlunescape maxinputs=<int>"
    },
    {
        "Command_Name": "xpath",
        "Description": "Redefines the XML path.",
        "Parameters": {
            "Optional": {
                "default": "default=<string>",
                "field": "field=<field>",
                "outfield": "outfield=<field>"
            },
            "Required": {
                "xpath-string": "<string>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "xpath  [outfield=<field>] <xpath-string> [field=<field>] [default=<string>]"
    },
    {
        "Command_Name": "xyseries",
        "Description": "Converts results into a format suitable for graphing.",
        "Parameters": {
            "Optional": {
                "format": "format=<string>",
                "grouped": "grouped= true | false",
                "sep": "sep=<string>"
            },
            "Required": {
                "<x-field>": "<field>",
                "<y-data-field>": "<field> [,<field>] ...",
                "<y-name-field>": "<field>"
            }
        },
        "Related commands": "",
        "Supported functions and syntax": "xyseries [grouped=<bool>] <x-field> <y-name-field> <y-data-field>... [sep=<string>] [format=<string>]"
    }
]